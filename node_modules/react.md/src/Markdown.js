/**
 * Copyright (c) 2011-2014, Christopher Jeffrey (https://github.com/chjj/)
 * Copyright (c) 2015, Utanapishtim (https://github.com/utanapishtim)
 */
require('babel-register')({
  presets: [
    'es2015',
    'stage-0',
    'react'
  ]
})

const marked = require('marked')
const renderer = require('./default-renderer.js')
const React = require('react')

const id = x => x
const DEFAULT_OPTS = Object.assign(marked.defaults, { renderer, gfm: true, tables: true, breaks: true, pedantic: true })
const Parser = marked.Parser
const Lexer = marked.Lexer
const InlineLexer = marked.InlineLexer

function escape(html, encode) {
  return html
    .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

function unescape(html) {
	// explicitly match decimal, hex, and named HTML entities
  return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/g, function(_, n) {
    n = n.toLowerCase();
    if (n === 'colon') return ':';
    if (n.charAt(0) === '#') {
      return n.charAt(1) === 'x'
        ? String.fromCharCode(parseInt(n.substring(2), 16))
        : String.fromCharCode(+n.substring(1));
    }
    return '';
  });
}

InlineLexer.prototype.output = function(src) {
  var out = []
    , link
    , text
    , href
    , cap;

  while (src) {
    // escape
    if (cap = this.rules.escape.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(cap[1])
      continue;
    }

    // autolink
    if (cap = this.rules.autolink.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[2] === '@') {
        text = cap[1].charAt(6) === ':'
          ? this.mangle(cap[1].substring(7))
          : this.mangle(cap[1]);
        href = this.mangle('mailto:') + text;
      } else {
        text = escape(cap[1]);
        href = text;
      }
      out = out.concat(this.renderer.link(href, null, text))
      continue;
    }

    // url (gfm)
    if (!this.inLink && (cap = this.rules.url.exec(src))) {
      src = src.substring(cap[0].length);
      text = escape(cap[1]);
      href = text;
      out = out.concat(this.renderer.link(href, null, text))
      continue;
    }

    // tag
    if (cap = this.rules.tag.exec(src)) {
      if (!this.inLink && /^<a /i.test(cap[0])) {
        this.inLink = true;
      } else if (this.inLink && /^<\/a>/i.test(cap[0])) {
        this.inLink = false;
      }
      src = src.substring(cap[0].length);
      out = out.concat(this.options.sanitize
        ? this.options.sanitizer
          ? this.options.sanitizer(cap[0])
          : escape(cap[0])
        : cap[0])
      continue;
    }

    // link
    if (cap = this.rules.link.exec(src)) {
      src = src.substring(cap[0].length);
      this.inLink = true;
      out = out.concat(this.outputLink(cap, {
        href: cap[2],
        title: cap[3]
      }))
      this.inLink = false;
      continue;
    }

    // reflink, nolink
    if ((cap = this.rules.reflink.exec(src))
        || (cap = this.rules.nolink.exec(src))) {
      src = src.substring(cap[0].length);
      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
      link = this.links[link.toLowerCase()];
      if (!link || !link.href) {
        out = out.concat(cap[0].charAt(0))
        src = cap[0].substring(1) + src;
        continue;
      }
      this.inLink = true;
      out = out.concat(this.outputLink(cap, link))
      this.inLink = false;
      continue;
    }

    // strong
    if (cap = this.rules.strong.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(this.renderer.strong(this.output(cap[2] || cap[1])))
      continue;
    }

    // em
    if (cap = this.rules.em.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(this.renderer.em(this.output(cap[2] || cap[1])))
      continue;
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(this.renderer.codespan(escape(cap[2], true)))
      continue;
    }

    // br
    if (cap = this.rules.br.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(this.renderer.br())
      continue;
    }

    // del (gfm)
    if (cap = this.rules.del.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(this.renderer.del(this.output(cap[1])))
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      src = src.substring(cap[0].length);
      out = out.concat(this.renderer.text(unescape(this.smartypants(cap[0]))))
      continue;
    }

    if (src) {
      throw new
        Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return (<span>{out.map(id)}</span>);
};

/**
 * Parse Loop
 */
 Parser.prototype.tok = function() {
   switch (this.token.type) {
     case 'space': {
       return '';
     }
     case 'hr': {
       return this.renderer.hr();
     }
     case 'heading': {
       return this.renderer.heading(
         this.inline.output(this.token.text),
         this.token.depth,
         this.token.text);
     }
     case 'code': {
       return this.renderer.code(this.token.text,
         this.token.lang,
         this.token.escaped);
     }
     case 'table': {
       var header = []
         , body = []
         , i
         , row
         , cell
         , flags
         , j;

       // header
       cell = [];
       for (i = 0; i < this.token.header.length; i++) {
         flags = { header: true, align: this.token.align[i] };
         cell = cell.concat(this.renderer.tablecell(
           this.inline.output(this.token.header[i]),
           { header: true, align: this.token.align[i] }
         ));
       }
       header = header.concat(this.renderer.tablerow(cell.map(id)));

       for (i = 0; i < this.token.cells.length; i++) {
         row = this.token.cells[i];

         cell = [];
         for (j = 0; j < row.length; j++) {
           cell = cell.concat(this.renderer.tablecell(
             this.inline.output(row[j]),
             { header: false, align: this.token.align[j] }
           ));
         }

         body = body.concat(this.renderer.tablerow(cell.map(id)));
       }
       return this.renderer.table(header.map(id), body.map(id));
     }
     case 'blockquote_start': {
       var body = [];

       while (this.next().type !== 'blockquote_end') {
         body = body.concat(this.tok());
       }

       return this.renderer.blockquote(body.map(id));
     }
     case 'list_start': {
       var body = []
         , ordered = this.token.ordered;

       while (this.next().type !== 'list_end') {
         body = body.concat(this.tok());
       }

       return this.renderer.list(body.map(id), ordered);
     }
     case 'list_item_start': {
       var body = [];

       while (this.next().type !== 'list_item_end') {
         body = body.concat(this.token.type === 'text'
           ? this.parseText()
           : this.tok())
       }

       return this.renderer.listitem(body.map(id));
     }
     case 'loose_item_start': {
       var body = [];

       while (this.next().type !== 'list_item_end') {
         body = body.concat(this.tok());
       }

       return this.renderer.listitem(body.map(id));
     }
     case 'html': {
       var html = !this.token.pre && !this.options.pedantic
         ? this.inline.output(this.token.text)
         : this.token.text;
       return this.renderer.html(html);
     }
     case 'paragraph': {
       return this.renderer.paragraph(this.inline.output(this.token.text));
     }
     case 'text': {
       return this.renderer.paragraph(this.parseText());
     }
   }
 };

Parser.prototype.parse = function(src) {
  this.inline = new InlineLexer(src.links, this.options, this.renderer);
  this.tokens = src.reverse();

  var out = []
  while (this.next()) {
    out = out.concat(this.tok())
  }

  return (<div>{out.map(id)}</div>)
};

Parser.parse = function(src, options, renderer) {
  var parser = new Parser(options, renderer);
  return parser.parse(src);
};

module.exports = ({src, opts}) => {
  const opt = Object.assign({}, DEFAULT_OPTS, opts)
  return (<div>{Parser.parse(Lexer.lex(src, opt), opt)}</div>)
}
