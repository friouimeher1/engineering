/**
 * Copyright (c) 2011-2014, Christopher Jeffrey (https://github.com/chjj/)
 * Copyright (c) 2015, Utanapishtim (https://github.com/utanapishtim)
 */

const marked = require('marked')
const React = require('react')

const id = x => x
const renderer = new marked.Renderer()

renderer.code = function(code, lang, escaped) {
  if (this.options.highlight) {
    var out = this.options.highlight(code, lang);
    if (out != null && out !== code) {
      escaped = true;
      code = out;
    }
  }

  return (!lang)
    ? (<pre><code>{(escaped) ? code : unescape(code, true)}</code></pre>)
    : (<pre><code className={`${this.options.langPrefix}${escape(lang, true)}`}>{escaped ? code : unescape(code, true)}</code></pre>)
}

renderer.blockquote = (quote) => (<blockquote>{quote}</blockquote>)

renderer.html = id

renderer.heading = function(text, level, raw) {
  const id = `${this.options.headerPrefix}${raw.toLowerCase().replace(/[^\w]+/g, '-')}`
  return React.createElement(`h${level}`, { id }, text)
}

renderer.hr = () => React.createElement("hr")

renderer.list = (body, ordered) => React.createElement(ordered ? 'ol' : 'ul', null, body)

renderer.listitem = (text) => (<li>{text}</li>)

renderer.paragraph = (text) => <p>{text}</p>

renderer.table = (header, body) => (
  <table>
    <thead>{header}</thead>
    <tbody>{body}</tbody>
  </table>
)


renderer.tablerow = (content) => (<tr>{content}</tr>)

renderer.tablecell = (content, flags) => {
  return React.createElement((flags.header) ? 'th' : 'td', { style: { textAlign: flags.align } }, content)
}

renderer.strong = (text) => (<strong>{text}</strong>)
renderer.em = (text) => <em>{text}</em>
renderer.codespan = (text) => (<code>{text}</code>)
renderer.br = () => React.createElement("br")
renderer.del = (text) => (<del>{text}</del>)

renderer.link = function(href, title, text) {
  if (this.options.sanitize) {
    try {
      var prot = decodeURIComponent(unescape(href))
        .replace(/[^\w:]/g, '')
        .toLowerCase();
      if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) return ''
    } catch (e) {
      return '';
    }
  }
  return (<a href={href} title={title}>{text}</a>)
};

renderer.image = (href, title, text) => React.createElement('img', { src: href, alt: text, title: title })

renderer.text = id

module.exports = renderer
